"gifski", "strex","matrixStats","tools","qgraph")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
#Set ggplot2 theme
theme_set(theme_classic())
#List of centrality types and their numbers
centralitylist = list("OutDegree" = 1, "InDegree" = 2, "Closeness" = 3,
"Betweenness" = 4, "InInfluence" = 5, "OutInfluence" = 6)
#Read historical FRM index
FRM_index = read.csv(paste0(input_path, "/Lambda/FRM_", channel, "_index.csv"))
#Create a list of files in the folder and extract dates from the names
file_list = list.files(path = paste0(input_path, "/Adj_Matrices"))
file_list = file_list[file_list!="Fixed"]
dates = as.character(str_first_number(file_list), format = "%Y%m%d")
dates = as.Date(dates, format = "%Y%m%d")
N = length(file_list)
#Create a list of all network graphs
allgraphs = lapply(1:N, function(i) {
data = read.csv(paste0(input_path, "/Adj_Matrices/", file_list[i]), row.names = 1)
M_stock = ncol(data)-M_macro
adj_matrix = data.matrix(data[1:M_stock, 1:M_stock])
q = qgraph(adj_matrix, layout = "circle", details = TRUE,
vsize = c(5,15), DoNotPlot = TRUE)
return(q)
})
wdir = "/Users/ruting/Documents/Github/FRM_Crypto_Github/FRM_All/"
input_path = past0(wdir, 'Output/Crypto/')
rm(list = ls(all = TRUE))
# wdir = "//Users/ruting/Documents/Github/FRM/FRM_Quantlet/FRM_All"
wdir = "/Users/ruting/Documents/Github/FRM_Crypto_Github/FRM_All/"
input_path = paste0(wdir, 'Output/Crypto/')
output_path = paste0(wdir,'Add_Correlation/')
save_date = 20230514
channel = "Crypto"
tau = 0.05
s = 63
#Plot parameter defined based on the outliers
if (channel == "Crypto") {
lambda_cutoff = 0.1359
M_macro = 5} else
if (channel == "EM") {
lambda_cutoff = 10
M_macro = 12}
#Check if package is installed, if not: install, either way: load
libraries = c("iml","ggplot2", "data.table", "igraph","timeDate", "stringr", "graphics","magick", "scales", "tidyr", "zoo", "foreach", "doParallel",
"xgboost","shapr","randomForest", "rpart", "quantreg", "readxl","dplyr", "xlsx", "psych","qgraph", "gganimate","av",
"gifski", "strex","matrixStats","tools","qgraph")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
#Set ggplot2 theme
theme_set(theme_classic())
#List of centrality types and their numbers
centralitylist = list("OutDegree" = 1, "InDegree" = 2, "Closeness" = 3,
"Betweenness" = 4, "InInfluence" = 5, "OutInfluence" = 6)
#Read historical FRM index
FRM_index = read.csv(paste0(input_path, "/Lambda/FRM_", channel, "_index.csv"))
## Calculate centralities
#Create a list of files in the folder and extract dates from the names
file_list = list.files(path = paste0(input_path, "/Adj_Matrices"))
file_list = file_list[file_list!="Fixed"]
dates = as.character(str_first_number(file_list), format = "%Y%m%d")
dates = as.Date(dates, format = "%Y%m%d")
N = length(file_list)
#Create a list of all network graphs
allgraphs = lapply(1:N, function(i) {
data = read.csv(paste0(input_path, "/Adj_Matrices/", file_list[i]), row.names = 1)
M_stock = ncol(data)-M_macro
adj_matrix = data.matrix(data[1:M_stock, 1:M_stock])
q = qgraph(adj_matrix, layout = "circle", details = TRUE,
vsize = c(5,15), DoNotPlot = TRUE)
return(q)
})
allcentralities = centrality(allgraphs)
eigencentrality = lapply(1:N, function(i) eigen_centrality(as.igraph(allgraphs[[i]]))$vector)
#Calculate averages
outdegree_avg = sapply(1:N, function(i) mean(allcentralities[[i]]$OutDegree))
indegree_avg = sapply(1:N, function(i) mean(allcentralities[[i]]$InDegree))
closeness_avg = sapply(1:N, function(i) mean(allcentralities[[i]]$Closeness))
betweenness_avg = sapply(1:N, function(i) mean(allcentralities[[i]]$Betweenness))
eigenvector_avg = sapply(1:N, function(i) mean(eigencentrality[[i]]))
Degree_Index = cbind(FRM_index, outdegree_avg, indegree_avg, closeness_avg, eigenvector_avg)
View(Degree_Index)
# read index
BEKK  = data.frame(read.csv(paste0(wdir, "MethodAdd/BEKK_Index_",
save_date, ".csv")))
BEKK = BEKK[,-1]
EDH = data.frame(read.csv(paste0(wdir, "MethodAdd/EDC_Index_",
save_date, ".csv")))
EDH = EDH[,-1]
colnames(EDH)[2] = 'EDH'
EDH$date = as.character(as.Date(as.character(EDH$date), format = "%Y%m%d"))
EDC= data.frame(read.csv(paste0(wdir, "MethodAdd/EDC_Index_Simple_",
save_date, ".csv")))
EDC = EDC[,-1]
Degree_Index = merge(Degree_Index, EDC, all.x = TRUE)
Degree_Index = merge(Degree_Index, EDH, all.x = TRUE)
Degree_Index = merge(Degree_Index, BEKK, all.x = TRUE)
cent_plot = function(cent_type, lambda) {
# cent_string = deparse(substitute(cent_type))
cent_string = cent_type
lambda = Degree_Index$frm
png(paste0(wdir, "Output/Crypto/Centrality/FRM_", cent_string,"_New.png"),
width = 900, height = 600, bg = "transparent")
par(mar = c(5, 4, 4, 4) + 0.3)
# plot(lambda[-outliers], type = "l", col = "blue", xlab = "",
#      ylab = "FRM index", xaxt = "n", lwd = 2)
plot(lambda, type = "l", col = "blue", xlab = "",
ylab = "FRM index", xaxt = "n", lwd = 2)
par(new = TRUE)
# plot(cent_type[-outliers], type = "l", col = "red", axes = FALSE,
#      xlab = "", ylab = "", xaxt = "n")
plot(Degree_Index[,cent_type], type = "l", col = "red", axes = FALSE,
xlab = "", ylab = "", xaxt = "n")
# axis(side = 4, at = pretty(range(cent_type[-outliers])))
axis(side = 4, at = pretty(range(Degree_Index[,cent_type])))
# ll = which(FRM_index$date[-outliers] %in% plot_labels)
# ll = which(FRM_index$date %in% plot_labels)
ll = seq(120, nrow(FRM_index), 120)
axis(1, at = ll, labels = FRM_index$date[ll])
mtext(paste0(gsub("_.*", "", cent_string) %>% toTitleCase, " centrality"),
side = 4, line = 3)
dev.off()
}
cent_plot('EDC_simp')
output_centrality
output_centrality = paste0(wdir,'Centrality/')
output_centrality
output_centrality = paste0(input_path,'Centrality/')
output_centrality
cent_plot = function(cent_type, lambda) {
# cent_string = deparse(substitute(cent_type))
cent_string = cent_type
lambda = Degree_Index$frm
png(paste0(output_centrality, "FRM_", cent_string,"_New.png"),
width = 900, height = 600, bg = "transparent")
par(mar = c(5, 4, 4, 4) + 0.3)
# plot(lambda[-outliers], type = "l", col = "blue", xlab = "",
#      ylab = "FRM index", xaxt = "n", lwd = 2)
plot(lambda, type = "l", col = "blue", xlab = "",
ylab = "FRM index", xaxt = "n", lwd = 2)
par(new = TRUE)
# plot(cent_type[-outliers], type = "l", col = "red", axes = FALSE,
#      xlab = "", ylab = "", xaxt = "n")
plot(Degree_Index[,cent_type], type = "l", col = "red", axes = FALSE,
xlab = "", ylab = "", xaxt = "n")
# axis(side = 4, at = pretty(range(cent_type[-outliers])))
axis(side = 4, at = pretty(range(Degree_Index[,cent_type])))
# ll = which(FRM_index$date[-outliers] %in% plot_labels)
# ll = which(FRM_index$date %in% plot_labels)
ll = seq(120, nrow(FRM_index), 120)
axis(1, at = ll, labels = FRM_index$date[ll])
mtext(paste0(gsub("_.*", "", cent_string) %>% toTitleCase, " centrality"),
side = 4, line = 3)
dev.off()
}
cent_plot('EDC_simp')
cent_plot('EDH')
cent_plot('BEKK_A')
cent_plot('BEKK_G')
cent_plot('outdegree_avg')
cent_plot('indegree_avg')
cent_plot('betweenness_avg')
cent_plot('closeness_avg')
cent_plot('eigenvector_avg')
cent_plot = function(cent_type, lambda) {
# cent_string = deparse(substitute(cent_type))
cent_string = cent_type
lambda = Degree_Index$frm
png(paste0(output_centrality, "FRM_", cent_string,".png"),
width = 900, height = 600, bg = "transparent")
par(mar = c(5, 4, 4, 4) + 0.3)
# plot(lambda[-outliers], type = "l", col = "blue", xlab = "",
#      ylab = "FRM index", xaxt = "n", lwd = 2)
plot(lambda, type = "l", col = "blue", xlab = "",
ylab = "FRM index", xaxt = "n", lwd = 2)
par(new = TRUE)
# plot(cent_type[-outliers], type = "l", col = "red", axes = FALSE,
#      xlab = "", ylab = "", xaxt = "n")
plot(Degree_Index[,cent_type], type = "l", col = "red", axes = FALSE,
xlab = "", ylab = "", xaxt = "n")
# axis(side = 4, at = pretty(range(cent_type[-outliers])))
axis(side = 4, at = pretty(range(Degree_Index[,cent_type])))
# ll = which(FRM_index$date[-outliers] %in% plot_labels)
# ll = which(FRM_index$date %in% plot_labels)
ll = seq(120, nrow(FRM_index), 120)
axis(1, at = ll, labels = FRM_index$date[ll])
mtext(paste0(gsub("_.*", "", cent_string) %>% toTitleCase, " centrality"),
side = 4, line = 3)
dev.off()
}
cent_plot('EDC_simp')
cent_plot('EDH')
cent_plot('BEKK_A')
cent_plot('BEKK_G')
cent_plot('outdegree_avg')
cent_plot('indegree_avg')
cent_plot('betweenness_avg')
cent_plot('closeness_avg')
cent_plot('eigenvector_avg')
cormatrix = Degree_Index[,c('frm','closeness_avg','eigenvector_avg','EDC_simp',	'EDH','BEKK_G')]
cormatrix = cormatrix[!is.na(cormatrix$EDH),]
colnames(cormatrix)[1] = 'FRM'
corr = cor(cormatrix,  method = "pearson")
corr
output_centrality
output_path
write.csv(corr,paste0(output_path, "/Centralilty_FRM_Corr_add.csv"),quote = FALSE)
write.csv(p_value_matrix,paste0(output_path, "/Centralilty_FRM_CorrP_add.csv"),quote = FALSE)
cormatrix = Degree_Index[,c('frm','closeness_avg','eigenvector_avg','EDC_simp',	'EDH','BEKK_G')]
cormatrix = cormatrix[!is.na(cormatrix$EDH),]
colnames(cormatrix)[1] = 'FRM'
corr = cor(cormatrix,  method = "pearson")
corr
p_value_matrix <- matrix(NA, nrow = ncol(cormatrix), ncol = ncol(cormatrix))
# Calculate p-values for each pair of variables
for (i in 1:(ncol(cormatrix) - 1)) {
for (j in (i + 1):ncol(cormatrix)) {
cor_test_result <- cor.test(cormatrix[, i], cormatrix[, j], method = "pearson")
p_value_matrix[i, j] <- p_value_matrix[j, i] <- cor_test_result$p.value
}
}
write.csv(corr,paste0(output_path, "/Centralilty_FRM_Corr_add.csv"),quote = FALSE)
write.csv(p_value_matrix,paste0(output_path, "/Centralilty_FRM_CorrP_add.csv"),quote = FALSE)
write.csv(corr,paste0(output_path, "Centralilty_FRM_Corr_add.csv"),quote = FALSE)
write.csv(p_value_matrix,paste0(output_path, "Centralilty_FRM_CorrP_add.csv"),quote = FALSE)
output_path = paste0(input_path,'Add_Correlation/')
write.csv(corr,paste0(output_path, "Centralilty_FRM_Corr_add.csv"),quote = FALSE)
write.csv(p_value_matrix,paste0(output_path, "Centralilty_FRM_CorrP_add.csv"),quote = FALSE)
wdir
# compare with VCRIX and CRIX
VIX_file = paste0(wdir,"Input/", channel, "/VCRIX")
CRIX = read.csv(paste0(VIX_file, "/CRIX.csv"))
# compare with VCRIX and CRIX
VIX_file = paste0(wdir,"Input/", channel, "/VCRIX")
CRIX = read.csv(paste0(VIX_file, "/CRIX.csv"))
loc = which(CRIX$price>200000)
CRIX$price[loc] = CRIX$price[loc] /1000
CRIX$CRIX_return = c(0,diff(log(CRIX$price)))
CRIX$vol_CRIX = NA
for (i in c(63:nrow(CRIX))){
CRIX$vol_CRIX[i] = (sd(CRIX$CRIX_return[(i-62):i]))^2
}
FRM_index = read.csv(paste0(input_path, "/Lambda/FRM_", channel, "_index.csv"))
FRM_index = merge(FRM_index, CRIX, all.x = TRUE, all.y = FALSE)
FRM_index = FRM_index[!is.na(FRM_index$vol_CRIX),]
FRM_index = FRM_index[FRM_index$date>'2018-11-01',]
png(paste0(output_path, "FRM_CRIX_Volatility.png"),
width = 900, height = 600, bg = "transparent")
par(mar = c(5, 4, 4, 4) + 0.3)
plot(FRM_index$frm, type = "l", col = "blue", xlab = "",
ylab = "FRM index", xaxt = "n", lwd = 2)
par(new = TRUE)
plot(FRM_index$vol_CRIX, type = "l", col = "red", axes = FALSE,
xlab = "", ylab = "", xaxt = "n")
axis(side = 4, at = pretty(range(FRM_index$vol_CRIX)))
ll = seq(120, nrow(FRM_index), 120)
axis(1, at = ll, labels = FRM_index$date[ll])
mtext("CRIX log return rolling variance", side = 4, line = 3)
dev.off()
# corr
cormatrix = FRM_index[,c('frm','vol_CRIX')]
colnames(cormatrix)[1] = 'FRM'
corr = cor(cormatrix,  method = "pearson")
corr
p_value_matrix <- matrix(NA, nrow = ncol(cormatrix), ncol = ncol(cormatrix))
# Calculate p-values for each pair of variables
for (i in 1:(ncol(cormatrix) - 1)) {
for (j in (i + 1):ncol(cormatrix)) {
cor_test_result <- cor.test(cormatrix[, i], cormatrix[, j], method = "pearson")
p_value_matrix[i, j] <- p_value_matrix[j, i] <- cor_test_result$p.value
}
}
write.csv(corr,paste0(output_path,"FRM_CRIX_Volatility_Corr.csv"),quote = FALSE)
write.csv(p_value_matrix,paste0(output_path,"FRM_CRIX_Volatility_CorrP.csv"),quote = FALSE)
rm(list = ls(all = TRUE))
graphics.off()
wdir = "/Users/ruting/Documents/Github/FRM_Crypto_Github/FRM_All/MethodAdd/"
wdir_ori = "/Users/ruting/Documents/Github/FRM_Crypto_Github/FRM_All/"
setwd(wdir)
# Path_load = paste0(root,"working_data/" ,date)
Path_save_xls = paste0(wdir_ori,'Output/Crypto/Add_PortfolioTest/')
Path_save_fig = paste0(wdir_ori,'Output/Crypto/Add_PortfolioTest/')
# dir.create(Path_load)
dir.create(Path_save_xls)
dir.create(Path_save_fig)
library(quadprog)
library(lpSolve)
library(stringr)
library(ggplot2)
library(dplyr)
library(Matrix)
source("Portfolio/Portfolio_methods.R")
# data period
date_start_data = 20180201
date_end_data = 20220511
# porfolio construction
date_start = 20190201
date_end = 20220511
# update 20240112
price = read.csv("Price_20230514.csv", header = TRUE)
price = price[,-1]
price$date = as.numeric(gsub("[-]", "", price$date))
return = read.csv("Return_20230514.csv", header = TRUE)
return = return[,-1]
return$date = as.numeric(gsub("[-]", "", return$date))
lambda = read.csv("lambdas_wide_RuiBack_2022.csv", header = TRUE)
lambda$date = as.numeric(gsub("[-]", "", lambda$date))
tau=0.05
price[is.na(price)] = 0
return[is.na(return)] = 0
return=return[return$date>=date_start_data,]
price=price[price$date>=date_start_data,]
lambda=lambda[lambda$date>=date_start_data,]
a = data.frame(sort(colMeans(lambda)))
# select_coin = c('date','BTC','ETH', 'XRP','BNB','BCH')
# 'LTC' lose data
select_coin = c('date','BTC','ADA','ETH', 'BCH', 'XLM','XRP','BNB','XMR')
lambdas=lambda[,select_coin]
return=return[colnames(lambdas)]
price=price[colnames(lambdas)]
## 1. Comulatative wealth
ticker = return$date
N = nrow(return)       # number of total days
N0 = which( ticker == date_start )
N1 = which( ticker == date_end )
s = 120                #rolling window lengthn / days in the sample / construction period
reb = 1             #rebalancing period
N_upd = floor((N1-N0)/reb+1)
Er =0.008             #expected return  mean(mu)
nss = 0               #Equals 1 if no short sales, for markowitz
ga=0.8               #qtec gamma
pweight_m = matrix(0,N_upd,ncol(return)) #markowitz
wealth_m = matrix(1,N_upd,3)
pweight_q = matrix(0,N_upd,ncol(return)) #qtec
wealth_q = matrix(1,N_upd,3)
pweight_l = matrix(0,N_upd,ncol(return)) #ltec
wealth_l = matrix(1,N_upd,3)
## markowitz
for (t in seq(N0, N1, reb)){
rdata = return[(t-s+1):t, ]
ldata = lambdas[(t-s+1):t, ]
#portfolio parameter
mu =colMeans(rdata[,c(2:ncol(rdata))])
n = length(mu)
cv = cov(rdata[,-1])
l_cv=cov(ldata[,-1])
l_mu=colMeans(ldata[,c(2:ncol(ldata) )])
# portfolio weight
sol_m = markowitz_nss(n,mu,cv,Er,nss)
w_m = as.matrix(sol_m$solution)
pweight_m[(t-N0)/reb+1,1] = ticker[t]
pweight_m[(t-N0)/reb+1,c(2:ncol(return))] = w_m
#portfolio wealth
if (t==N0){
wealth_m[(t-N0)/reb+1,1] = ticker[t]
} else {
ret = log(price[t,-1]) - log(price[t-reb,-1])
for (i in (1:length(ret))){
if ( (ret[i]=="-Inf") || (ret[i]=="NaN") || (ret[i]=="Inf")){
ret[i]=0
}
}
wealth_m[(t-N0)/reb+1,1] = ticker[t]
wealth_m[(t-N0)/reb+1,2] = wealth_m[(t-N0)/reb,2] + as.numeric(ret) %*% pweight_m[(t-N0)/reb,-1]    #Wt=W(t-1)+w(t-1)Xt
}
}
## for ltec
for (t in seq(N0, N1, reb)){
rdata = return[(t-s+1):t, ]
ldata = lambdas[(t-s+1):t, ]
#squre root
ldata[,2:ncol(lambdas)] = sqrt(lambdas[(t-s+1):t, 2:ncol(lambdas)] )
#portfolio parameter
mu =colMeans(rdata[,c(2:ncol(rdata))])    #mean vector
n = length(mu)                            #number of assests
cv = cov(rdata[,-1])                      #return covariance matrix
l_cv=cov(ldata[,-1])                      #lambda covariance matrix
l_mu=colMeans(ldata[,c(2:ncol(ldata) )])  #lambda mean
sol_l = ltec(n,mu,l_mu,Er)
w_l = as.matrix(sol_l$solution)
pweight_l[(t-N0)/reb+1,1] = ticker[t]
pweight_l[(t-N0)/reb+1,c(2:ncol(return))] = w_l
#portfolio wealth
if (t==N0){
wealth_l[(t-N0)/reb+1,1] = ticker[t]
} else {
ret = log(price[t,-1]) - log(price[t-reb,-1])
for (i in (1:length(ret))){
if ( (ret[i]=="-Inf") || (ret[i]=="NaN") || (ret[i]=="Inf")){
ret[i]=0
}
}
wealth_l[(t-N0)/reb+1,1] = ticker[t]
wealth_l[(t-N0)/reb+1,2] = wealth_l[(t-N0)/reb,2] + as.numeric(ret) %*% pweight_l[(t-N0)/reb,-1]
}
}
wealth_l[,3] = c(0,diff(wealth_l[,2])/wealth_l[1:(nrow(wealth_l)-1),2])
#qtec
for (t in seq(N0, N1, reb)){
rdata = return[(t-s+1):t, ]
ldata = lambdas[(t-s+1):t, ]
#portfolio parameter
mu =colMeans(rdata[,c(2:ncol(rdata))])
n = length(mu)
cv = cov(rdata[,-1])
l_cv=cov(ldata[,-1])
l_mu=colMeans(ldata[,c(2:ncol(ldata) )])
w_q =qtec(n,mu,l_mu,l_cv,Er,nss,ga)
pweight_q[(t-N0)/reb+1,1] = ticker[t]
pweight_q[(t-N0)/reb+1,c(2:ncol(return))] = w_q
if (t==N0){
wealth_q[(t-N0)/reb+1,1] = ticker[t]
} else {
ret = log(price[t,-1]) - log(price[t-reb,-1])
for (i in (1:length(ret))){
if ( (ret[i]=="-Inf") || (ret[i]=="NaN") || (ret[i]=="Inf")){
ret[i]=0
}
}
wealth_q[(t-N0)/reb+1,1] = ticker[t]
wealth_q[(t-N0)/reb+1,2] = wealth_q[(t-N0)/reb,2] + as.numeric(ret) %*% pweight_q[(t-N0)/reb,-1]
}
}
wealth_q[,3] = c(0,diff(wealth_q[,2])/wealth_q[1:(nrow(wealth_q)-1),2])
Out_PortWealth = cbind(wealth_q, wealth_m[,-1], wealth_l[,-1])
Out_PortWealth = data.frame(Out_PortWealth)
colnames(Out_PortWealth) = c('date', 'Wealth_QTEC','Return_QTEC', 'Wealth_MV', 'Return_MV', 'Wealth_LTEC','Return_LTEC')
write.csv(Out_PortWealth, paste0(Path_save_xls, "/PortWealth.csv"), quote = FALSE)
# #----------------------------------------Portfolio result----------------------------------------
# Performance
# Accumulated return, Average daily return, std of daily return, sharp ratio, effective n
Performance <- data.frame(Methodology = c('QTEC','MV','LTEC'),
AccumulativeReturn = c(wealth_q[nrow(wealth_q),2]-1,wealth_m[nrow(wealth_m),2]-1,wealth_l[nrow(wealth_l),2]-1),
AverageDailyReturn = c(mean(wealth_q[,3],na.rm = TRUE), mean(wealth_m[,3],na.rm = TRUE), mean(wealth_l[,3],na.rm = TRUE)),
StdDailyReturn = c(sd(wealth_q[,3],na.rm = TRUE), sd(wealth_m[,3],na.rm = TRUE), sd(wealth_l[,3],na.rm = TRUE))
)
Performance$Sharp = Performance$AverageDailyReturn/Performance$StdDailyReturn
write.csv(Performance, paste0(Path_save_xls, "PortfolioPerformance.csv"), quote = FALSE)
# plot wealth for different strategies
df<- data.frame(
x=as.Date(as.character(wealth_l[,1]),  "%Y%m%d"),
y1=wealth_m [,2],
y2=wealth_l [,2],
y3=wealth_q [,2]
)
# Plot
p=ggplot(df, aes(x=x)) +
scale_x_date(date_labels = "%Y%m%d",breaks='1 month',expand = c(0, 0)) +
geom_line(aes(y = y1), color="dimgrey") +
geom_line(aes(y = y2), color="steelblue") +
geom_line(aes(y = y3), color="tomato2") +
theme( panel.grid=element_blank(),
panel.border = element_rect(color="black",fill = NA),
legend.position = "none",
axis.title = element_blank(),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
legend.box.background = element_rect(fill = "transparent"),
#axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90, hjust = 1,size=14, face= "bold"),
axis.text.y = element_text(size=14, face= "bold" ) )
png(paste0(Path_save_fig,"fig_Wealth_",date_end,"_",s, "_",reb, "_",Er,"_",ga,"_",tau,".png"),width = 800, height = 500,
bg = "transparent")
p
dev.off()
sd(wealth_m[,3],na.rm = TRUE)
(wealth_m[,3]
)
View(wealth_m)
wealth_m[,3] = c(0,diff(wealth_m[,2])/wealth_m[1:(nrow(wealth_m)-1),2])
Out_PortWealth = cbind(wealth_q, wealth_m[,-1], wealth_l[,-1])
Out_PortWealth = data.frame(Out_PortWealth)
colnames(Out_PortWealth) = c('date', 'Wealth_QTEC','Return_QTEC', 'Wealth_MV', 'Return_MV', 'Wealth_LTEC','Return_LTEC')
write.csv(Out_PortWealth, paste0(Path_save_xls, "/PortWealth.csv"), quote = FALSE)
Performance <- data.frame(Methodology = c('QTEC','MV','LTEC'),
AccumulativeReturn = c(wealth_q[nrow(wealth_q),2]-1,wealth_m[nrow(wealth_m),2]-1,wealth_l[nrow(wealth_l),2]-1),
AverageDailyReturn = c(mean(wealth_q[,3],na.rm = TRUE), mean(wealth_m[,3],na.rm = TRUE), mean(wealth_l[,3],na.rm = TRUE)),
StdDailyReturn = c(sd(wealth_q[,3],na.rm = TRUE), sd(wealth_m[,3],na.rm = TRUE), sd(wealth_l[,3],na.rm = TRUE))
)
Performance$Sharp = Performance$AverageDailyReturn/Performance$StdDailyReturn
write.csv(Performance, paste0(Path_save_xls, "PortfolioPerformance.csv"), quote = FALSE)
# plot wealth for different strategies
df<- data.frame(
x=as.Date(as.character(wealth_l[,1]),  "%Y%m%d"),
y1=wealth_m [,2],
y2=wealth_l [,2],
y3=wealth_q [,2]
)
# Plot
p=ggplot(df, aes(x=x)) +
scale_x_date(date_labels = "%Y%m%d",breaks='1 month',expand = c(0, 0)) +
geom_line(aes(y = y1), color="dimgrey") +
geom_line(aes(y = y2), color="steelblue") +
geom_line(aes(y = y3), color="tomato2") +
theme( panel.grid=element_blank(),
panel.border = element_rect(color="black",fill = NA),
legend.position = "none",
axis.title = element_blank(),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
legend.box.background = element_rect(fill = "transparent"),
#axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90, hjust = 1,size=14, face= "bold"),
axis.text.y = element_text(size=14, face= "bold" ) )
png(paste0(Path_save_fig,"fig_Wealth_",date_end,"_",s, "_",reb, "_",Er,"_",ga,"_",tau,".png"),width = 800, height = 500,
bg = "transparent")
p
dev.off()
